{"ast":null,"code":"import { GET_LOGS, SET_LOADING, LOGS_ERROR, ADD_LOG, DELETE_LOG, SET_CURRENT, CLEAR_CURRENT, UPDATE_LOG, SEARCH_LOGS } from './types'; // Get logs from server\n\nexport const getLogs = () => async dispatch => {\n  try {\n    setloading();\n    const res = await fetch('/logs');\n    const data = await res.json();\n    dispatch({\n      type: GET_LOGS,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: err.response.statusText\n    });\n  }\n}; //Add new log\n\nexport const addLog = log => async dispatch => {\n  //try {\n  setloading();\n  const res = await fetch('/logs', {\n    method: 'POST',\n    body: JSON.stringify(log),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const data = await res.json();\n  console.log(data);\n  dispatch({\n    type: ADD_LOG,\n    payload: data\n  }); // } catch (err) {\n  //   dispatch({\n  //     type: LOGS_ERROR,\n  //     payload: err.response.statusText,\n  //   });\n  // }\n}; //Delete log from server\n\nexport const deleteLog = _id => async dispatch => {\n  try {\n    setloading();\n    await fetch(`/logs/${_id}`, {\n      method: 'DELETE'\n    });\n    dispatch({\n      type: DELETE_LOG,\n      payload: _id\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: err.response.statusText\n    });\n  }\n}; //Update log on server\n\nexport const updateLog = log => async dispatch => {\n  try {\n    setloading();\n    const res = await fetch(`/logs/${log.id}`, {\n      method: 'PUT',\n      body: JSON.stringify(log),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await res.json();\n    dispatch({\n      type: UPDATE_LOG,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: err.response.statusText\n    });\n  }\n}; // Search server logs\n\nexport const searchLogs = text => async dispatch => {\n  try {\n    setloading();\n    const res = await fetch(`/logs?q=${text}`);\n    const data = await res.json();\n    dispatch({\n      type: SEARCH_LOGS,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: err.response.statusText\n    });\n  }\n}; //Set Current log\n\nexport const setCurrent = log => {\n  return {\n    type: SET_CURRENT,\n    payload: log\n  };\n}; // Clear current log\n\nexport const clearCurrent = () => {\n  return {\n    type: CLEAR_CURRENT\n  };\n}; // Set loading true\n\nexport const setloading = () => {\n  return {\n    type: SET_LOADING\n  };\n};","map":{"version":3,"sources":["/home/hiren/github/it-logger/client/src/actions/logActions.js"],"names":["GET_LOGS","SET_LOADING","LOGS_ERROR","ADD_LOG","DELETE_LOG","SET_CURRENT","CLEAR_CURRENT","UPDATE_LOG","SEARCH_LOGS","getLogs","dispatch","setloading","res","fetch","data","json","type","payload","err","response","statusText","addLog","log","method","body","JSON","stringify","headers","console","deleteLog","_id","updateLog","id","searchLogs","text","setCurrent","clearCurrent"],"mappings":"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","sourcesContent":["import {\n  GET_LOGS,\n  SET_LOADING,\n  LOGS_ERROR,\n  ADD_LOG,\n  DELETE_LOG,\n  SET_CURRENT,\n  CLEAR_CURRENT,\n  UPDATE_LOG,\n  SEARCH_LOGS,\n} from './types';\n\n// Get logs from server\nexport const getLogs = () => async (dispatch) => {\n  try {\n    setloading();\n    const res = await fetch('/logs');\n    const data = await res.json();\n    dispatch({\n      type: GET_LOGS,\n      payload: data,\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: err.response.statusText,\n    });\n  }\n};\n\n//Add new log\nexport const addLog = (log) => async (dispatch) => {\n  //try {\n  setloading();\n  const res = await fetch('/logs', {\n    method: 'POST',\n    body: JSON.stringify(log),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n\n  const data = await res.json();\n  console.log(data);\n  dispatch({\n    type: ADD_LOG,\n    payload: data,\n  });\n  // } catch (err) {\n  //   dispatch({\n  //     type: LOGS_ERROR,\n  //     payload: err.response.statusText,\n  //   });\n  // }\n};\n//Delete log from server\nexport const deleteLog = (_id) => async (dispatch) => {\n  try {\n    setloading();\n    await fetch(`/logs/${_id}`, {\n      method: 'DELETE',\n    });\n    dispatch({\n      type: DELETE_LOG,\n      payload: _id,\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: err.response.statusText,\n    });\n  }\n};\n\n//Update log on server\nexport const updateLog = (log) => async (dispatch) => {\n  try {\n    setloading();\n    const res = await fetch(`/logs/${log.id}`, {\n      method: 'PUT',\n      body: JSON.stringify(log),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    const data = await res.json();\n    dispatch({\n      type: UPDATE_LOG,\n      payload: data,\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: err.response.statusText,\n    });\n  }\n};\n// Search server logs\nexport const searchLogs = (text) => async (dispatch) => {\n  try {\n    setloading();\n    const res = await fetch(`/logs?q=${text}`);\n    const data = await res.json();\n    dispatch({\n      type: SEARCH_LOGS,\n      payload: data,\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: err.response.statusText,\n    });\n  }\n};\n\n//Set Current log\nexport const setCurrent = (log) => {\n  return {\n    type: SET_CURRENT,\n    payload: log,\n  };\n};\n// Clear current log\n\nexport const clearCurrent = () => {\n  return {\n    type: CLEAR_CURRENT,\n  };\n};\n\n// Set loading true\nexport const setloading = () => {\n  return {\n    type: SET_LOADING,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}