[{"/home/hiren/github/it-logger/client/src/index.js":"1","/home/hiren/github/it-logger/client/src/App.js":"2","/home/hiren/github/it-logger/client/src/reportWebVitals.js":"3","/home/hiren/github/it-logger/client/src/store.js":"4","/home/hiren/github/it-logger/client/src/components/layout/SearchBar.js":"5","/home/hiren/github/it-logger/client/src/components/layout/AddBtn.js":"6","/home/hiren/github/it-logger/client/src/components/logs/AddLogModal.js":"7","/home/hiren/github/it-logger/client/src/components/logs/Logs.js":"8","/home/hiren/github/it-logger/client/src/components/techs/AddTechModal.js":"9","/home/hiren/github/it-logger/client/src/components/logs/EditLogModal.js":"10","/home/hiren/github/it-logger/client/src/components/techs/TechListModal.js":"11","/home/hiren/github/it-logger/client/src/components/layout/Preloader.js":"12","/home/hiren/github/it-logger/client/src/components/logs/LogItem.js":"13","/home/hiren/github/it-logger/client/src/components/techs/techSelectOptions.js":"14","/home/hiren/github/it-logger/client/src/components/techs/TechItem.js":"15","/home/hiren/github/it-logger/client/src/actions/logActions.js":"16","/home/hiren/github/it-logger/client/src/actions/techActions.js":"17","/home/hiren/github/it-logger/client/src/reducers/index.js":"18","/home/hiren/github/it-logger/client/src/actions/types.js":"19","/home/hiren/github/it-logger/client/src/reducers/logReducer.js":"20","/home/hiren/github/it-logger/client/src/reducers/techRedcuer.js":"21"},{"size":267,"mtime":1631252789824,"results":"22","hashOfConfig":"23"},{"size":1055,"mtime":1631252789824,"results":"24","hashOfConfig":"23"},{"size":362,"mtime":1631252789824,"results":"25","hashOfConfig":"23"},{"size":383,"mtime":1631252789824,"results":"26","hashOfConfig":"23"},{"size":1037,"mtime":1631252789824,"results":"27","hashOfConfig":"23"},{"size":740,"mtime":1631252789824,"results":"28","hashOfConfig":"23"},{"size":2813,"mtime":1631678123775,"results":"29","hashOfConfig":"23"},{"size":1012,"mtime":1631682408778,"results":"30","hashOfConfig":"23"},{"size":2003,"mtime":1631504282299,"results":"31","hashOfConfig":"23"},{"size":3028,"mtime":1631682887371,"results":"32","hashOfConfig":"23"},{"size":934,"mtime":1631504189158,"results":"33","hashOfConfig":"23"},{"size":206,"mtime":1631252789824,"results":"34","hashOfConfig":"23"},{"size":1382,"mtime":1631681919656,"results":"35","hashOfConfig":"23"},{"size":774,"mtime":1631504189158,"results":"36","hashOfConfig":"23"},{"size":779,"mtime":1631682497818,"results":"37","hashOfConfig":"23"},{"size":2547,"mtime":1631683583379,"results":"38","hashOfConfig":"23"},{"size":1408,"mtime":1631682285664,"results":"39","hashOfConfig":"23"},{"size":199,"mtime":1631252789824,"results":"40","hashOfConfig":"23"},{"size":560,"mtime":1631252789824,"results":"41","hashOfConfig":"23"},{"size":1503,"mtime":1631682568726,"results":"42","hashOfConfig":"23"},{"size":955,"mtime":1631682529074,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"19m8ln6",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"46"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"46"},"/home/hiren/github/it-logger/client/src/index.js",[],["92","93"],"/home/hiren/github/it-logger/client/src/App.js",[],"/home/hiren/github/it-logger/client/src/reportWebVitals.js",[],"/home/hiren/github/it-logger/client/src/store.js",[],"/home/hiren/github/it-logger/client/src/components/layout/SearchBar.js",[],"/home/hiren/github/it-logger/client/src/components/layout/AddBtn.js",[],"/home/hiren/github/it-logger/client/src/components/logs/AddLogModal.js",["94"],"import { Modal } from 'materialize-css';\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { PropTypes } from 'prop-types';\nimport { addLog } from '../../actions/logActions';\nimport TechSelectOptions from '../techs/techSelectOptions';\nimport M from 'materialize-css/dist/js/materialize.min.js';\n\nconst AddLogModal = ({ addLog }) => {\n  const [message, setMessage] = useState('');\n  const [attention, setAttention] = useState(false);\n  const [tech, setTech] = useState('');\n\n  const onSubmit = () => {\n    if (message === '' || tech === '') {\n      M.toast({ html: 'Please enter a message and tech' });\n    } else {\n      const newLog = {\n        message,\n        attention,\n        tech,\n        date: new Date(),\n      };\n      console.log(newLog);\n      addLog(newLog);\n      M.toast({ html: `Log added by ${tech}` });\n      //Clear Fields\n      setMessage('');\n      setTech('');\n      setAttention(false);\n    }\n  };\n  return (\n    <div id='add-log-modal' className='modal' style={modalstyle}>\n      <div className='modal-content'>\n        <h4>Enter System Log</h4>\n        <div className='row'>\n          <div className='input-field'></div>\n          <input\n            type='text'\n            name='message'\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n          />\n          <label htmlFor='message' className='active'>\n            Log Message\n          </label>\n        </div>\n\n        <div className='row'>\n          <div className='input-field'>\n            <select\n              name='tech'\n              value={tech}\n              className='browser-default'\n              onChange={(e) => setTech(e.target.value)}\n            >\n              <option value='' disabled>\n                Select Technician\n              </option>\n              <TechSelectOptions />\n            </select>\n          </div>\n        </div>\n\n        <div className='row'>\n          <div className='input-field'>\n            <p>\n              <label>\n                <input\n                  type='checkbox'\n                  className='filled-in'\n                  checked={attention}\n                  value={attention}\n                  onChange={(e) => setAttention(!attention)}\n                />\n                <span>Needs Attention</span>\n              </label>\n            </p>\n          </div>\n        </div>\n      </div>\n      <div className='modal-footer'>\n        <a\n          href='#!'\n          onClick={onSubmit}\n          className='modal-close waves-effect blue waves-light btn'\n        >\n          Enter\n        </a>\n      </div>\n    </div>\n  );\n};\n\nAddLogModal.propTypes = {\n  addLog: PropTypes.func.isRequired,\n};\n\nconst modalstyle = {\n  width: '75%',\n  height: '75%',\n};\nexport default connect(null, { addLog })(AddLogModal);\n","/home/hiren/github/it-logger/client/src/components/logs/Logs.js",[],"/home/hiren/github/it-logger/client/src/components/techs/AddTechModal.js",["95"],"import { Modal } from 'materialize-css';\nimport React, { useState } from 'react';\nimport M from 'materialize-css/dist/js/materialize.min.js';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { addTech } from '../../actions/techActions';\n\nconst AddLTechModal = ({ addTech }) => {\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n\n  const onSubmit = () => {\n    if (firstName === '' || lastName === '') {\n      M.toast({ html: 'Please enter the first and last name' });\n    } else {\n      addTech({\n        firstName,\n        lastName,\n      });\n      M.toast({ html: `${firstName} ${lastName} was added as a tech` });\n      //Clear Fields\n      setFirstName('');\n      setLastName('');\n    }\n  };\n  return (\n    <div id='add-tech-modal' className='modal'>\n      <div className='modal-content'>\n        <h4>New Technician</h4>\n        <div className='row'>\n          <div className='input-field'></div>\n          <input\n            type='text'\n            name='firstName'\n            value={firstName}\n            onChange={(e) => setFirstName(e.target.value)}\n          />\n          <label htmlFor='firstName' className='active'>\n            First Name\n          </label>\n        </div>\n\n        <div className='row'>\n          <div className='input-field'></div>\n          <input\n            type='text'\n            name='lastName'\n            value={lastName}\n            onChange={(e) => setLastName(e.target.value)}\n          />\n          <label htmlFor='lastName' className='active'>\n            Last Name\n          </label>\n        </div>\n      </div>\n      <div className='modal-footer'>\n        <a\n          href='#!'\n          onClick={onSubmit}\n          className='modal-close waves-effect blue waves-light btn'\n        >\n          Enter\n        </a>\n      </div>\n    </div>\n  );\n};\nAddLTechModal.propTypes = {\n  addTech: PropTypes.func.isRequired,\n};\nexport default connect(null, { addTech })(AddLTechModal);\n","/home/hiren/github/it-logger/client/src/components/logs/EditLogModal.js",["96"],"import { Modal } from 'materialize-css';\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport M from 'materialize-css/dist/js/materialize.min.js';\nimport { updateLog } from '../../actions/logActions';\nimport TechSelectOptions from '../techs/techSelectOptions';\n\nconst EditLogModal = ({ current, updateLog }) => {\n  const [message, setMessage] = useState('');\n  const [attention, setAttention] = useState(false);\n  const [tech, setTech] = useState('');\n\n  useEffect(() => {\n    if (current) {\n      setMessage(current.message);\n      setAttention(current.attention);\n      setTech(current.tech);\n    }\n  }, [current]);\n\n  const onSubmit = () => {\n    if (message === '' || tech === '') {\n      M.toast({ html: 'Please enter a message and tech' });\n    } else {\n      const updLog = {\n        _id: current.id,\n        message,\n        attention,\n        tech,\n        date: new Date(),\n      };\n      updateLog(updLog);\n      M.toast({ html: `Log updated by ${tech}` });\n\n      //Clear Fields\n      setMessage('');\n      setTech('');\n      setAttention(false);\n    }\n  };\n  return (\n    <div id='edit-log-modal' className='modal' style={modalstyle}>\n      <div className='modal-content'>\n        <h4>Enter System Log</h4>\n        <div className='row'>\n          <div className='input-field'></div>\n          <input\n            type='text'\n            name='message'\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n          />\n        </div>\n\n        <div className='row'>\n          <div className='input-field'>\n            <select\n              name='tech'\n              value={tech}\n              className='browser-default'\n              onChange={(e) => setTech(e.target.value)}\n            >\n              <option value='' disabled>\n                Select Technician\n              </option>\n              <TechSelectOptions />\n            </select>\n          </div>\n        </div>\n\n        <div className='row'>\n          <div className='input-field'>\n            <p>\n              <label>\n                <input\n                  type='checkbox'\n                  className='filled-in'\n                  checked={attention}\n                  value={attention}\n                  onChange={(e) => setAttention(!attention)}\n                />\n                <span>Needs Attention</span>\n              </label>\n            </p>\n          </div>\n        </div>\n      </div>\n      <div className='modal-footer'>\n        <a\n          href='#!'\n          onClick={onSubmit}\n          className='modal-close waves-effect blue waves-light btn'\n        >\n          Enter\n        </a>\n      </div>\n    </div>\n  );\n};\nconst modalstyle = {\n  width: '75%',\n  height: '75%',\n};\nEditLogModal.prototypes = {\n  current: PropTypes.object,\n  updateLog: PropTypes.func.isRequired,\n};\nconst mapStateToProps = (state) => ({\n  current: state.log.current,\n});\nexport default connect(mapStateToProps, { updateLog })(EditLogModal);\n","/home/hiren/github/it-logger/client/src/components/techs/TechListModal.js",[],"/home/hiren/github/it-logger/client/src/components/layout/Preloader.js",[],"/home/hiren/github/it-logger/client/src/components/logs/LogItem.js",[],"/home/hiren/github/it-logger/client/src/components/techs/techSelectOptions.js",[],"/home/hiren/github/it-logger/client/src/components/techs/TechItem.js",[],"/home/hiren/github/it-logger/client/src/actions/logActions.js",[],"/home/hiren/github/it-logger/client/src/actions/techActions.js",[],"/home/hiren/github/it-logger/client/src/reducers/index.js",[],"/home/hiren/github/it-logger/client/src/actions/types.js",[],"/home/hiren/github/it-logger/client/src/reducers/logReducer.js",["97"],"import {\n  GET_LOGS,\n  SET_LOADING,\n  LOGS_ERROR,\n  ADD_LOG,\n  DELETE_LOG,\n  SET_CURRENT,\n  CLEAR_CURRENT,\n  UPDATE_LOG,\n  SEARCH_LOGS,\n} from '../actions/types';\n\nconst inititalState = {\n  logs: null,\n  current: null,\n  loading: false,\n  error: null,\n};\n// Get logs from server\nexport default (state = inititalState, action) => {\n  switch (action.type) {\n    case GET_LOGS:\n      return {\n        ...state,\n        logs: action.payload,\n        loading: false,\n      };\n    case ADD_LOG:\n      return {\n        ...state,\n        logs: [...state.logs, action.payload],\n        loading: false,\n      };\n    case DELETE_LOG: {\n      return {\n        ...state,\n        logs: state.logs.filter((log) => log._id !== action.payload),\n        loading: false,\n      };\n    }\n    case UPDATE_LOG:\n      return {\n        ...state,\n        logs: state.logs.map((log) =>\n          log.id === action.payload.id ? action.payload : log\n        ),\n      };\n    case SEARCH_LOGS: {\n      return {\n        ...state,\n        logs: action.payload,\n      };\n    }\n    case SET_CURRENT: {\n      return {\n        ...state,\n        current: action.payload,\n      };\n    }\n    case CLEAR_CURRENT: {\n      return {\n        ...state,\n        current: null,\n      };\n    }\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n    case LOGS_ERROR:\n      console.error(action.payload);\n      return {\n        ...state,\n        error: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n","/home/hiren/github/it-logger/client/src/reducers/techRedcuer.js",["98"],"import {\n  GET_TECHS,\n  ADD_TECH,\n  DELETE_TECH,\n  SET_LOADING,\n  TECHS_ERROR,\n} from '../actions/types';\n\nconst inititalState = {\n  techs: null,\n  loading: false,\n  error: null,\n};\n\nexport default (state = inititalState, action) => {\n  switch (action.type) {\n    case GET_TECHS:\n      return {\n        ...state,\n        techs: action.payload,\n        loading: false,\n      };\n    case ADD_TECH:\n      return {\n        ...state,\n        techs: [...state.techs, action.payload],\n        loading: false,\n      };\n    case DELETE_TECH:\n      return {\n        ...state,\n        techs: state.techs.filter((tech) => tech._id !== action.payload),\n        loading: false,\n      };\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n    case TECHS_ERROR:\n      console.log(action.payload);\n      return {\n        ...state,\n        error: action.payload,\n        loading: false,\n      };\n\n    default:\n      return state;\n  }\n};\n",{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","severity":1,"message":"104","line":1,"column":10,"nodeType":"105","messageId":"106","endLine":1,"endColumn":15},{"ruleId":"103","severity":1,"message":"104","line":1,"column":10,"nodeType":"105","messageId":"106","endLine":1,"endColumn":15},{"ruleId":"103","severity":1,"message":"104","line":1,"column":10,"nodeType":"105","messageId":"106","endLine":1,"endColumn":15},{"ruleId":"107","severity":1,"message":"108","line":20,"column":1,"nodeType":"109","endLine":80,"endColumn":3},{"ruleId":"107","severity":1,"message":"108","line":15,"column":1,"nodeType":"109","endLine":51,"endColumn":3},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],"no-unused-vars","'Modal' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]